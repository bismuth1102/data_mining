# model = keras.Sequential()
# model.add(keras.layers.Embedding(20000, 16))
# model.add(keras.layers.GlobalAveragePooling1D())
# model.add(keras.layers.Dense(16, activation=tf.nn.relu))
# model.add(keras.layers.Dropout(rate=1))
# model.add(keras.layers.Dense(1, activation=tf.nn.sigmoid))

# model.compile(optimizer=tf.train.AdamOptimizer(),
#               loss='binary_crossentropy',
#               metrics=['accuracy'])


# model.fit(X_train_seq[3001:],y_score[3001:],
#           epochs=7,
#           batch_size=128,
#           validation_data=(X_train_seq[0:3000], X_train[0:3000].score.values),
#           verbose=1)

# output_array = model.predict(X_test_seq)
# print(output_array)

# df_end_id = pd.DataFrame(data=X_test.id)

# df_end_score = pd.DataFrame(data=output_array,columns=['score'])
# df_frames = [df_end_id,df_end_score]
# df_end = pd.concat(df_frames,axis=1)

# df_end.to_csv('data/submission.csv',index=False)